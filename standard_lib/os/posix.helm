foreign import dl   "system:dl"
foreign import libc "system:c"

import "std:str"
import "std:mem"
using import "std:sys/posix/posix"
using import "std:sys/posix/posix_types"


O_RDONLY   : i32 : 0x00000;
O_WRONLY   : i32 : 0x00001;
O_RDWR     : i32 : 0x00002;
O_CREATE   : i32 : 0x00040;
O_EXCL     : i32 : 0x00080;
O_NOCTTY   : i32 : 0x00100;
O_TRUNC    : i32 : 0x00200;
O_NONBLOCK : i32 : 0x00800;
O_APPEND   : i32 : 0x00400;
O_SYNC     : i32 : 0x01000;
O_ASYNC    : i32 : 0x02000;
O_CLOEXEC  : i32 : 0x80000;


SEEK_SET   :: 0;
SEEK_CUR   :: 1;
SEEK_END   :: 2;
SEEK_DATA  :: 3;
SEEK_HOLE  :: 4;
SEEK_MAX   :: SEEK_HOLE;

// NOTE(zangent): These are OS specific!
// Do not mix these up!
// TODO: Make this accurate.
RTLD_LAZY         :: 0x001;
RTLD_NOW          :: 0x002;
RTLD_BINDING_MASK :: 0x3;
RTLD_GLOBAL       :: 0x100;

// "Argv" arguments converted to Odin strings
args := _alloc_command_line_arguments();


F_OK :: 0; // Test for file existance
X_OK :: 1; // Test for execute permission
W_OK :: 2; // Test for write permission
R_OK :: 4; // Test for read permission

when ODIN_OS == "osx" {
	foreign libc {
		@(link_name="lseek") _unix_seek    :: proc(fd: Handle, offset: off, whence: i32) -> i64 ---;
	}
} else {
	foreign libc {
		@(link_name="lseek64") _unix_seek    :: proc(fd: Handle, offset: i64, whence: i32) -> i64 ---;
	}
}

foreign libc {
	@(link_name="read")    _unix_read    :: proc(fd: Handle, buf: rawptr, size: int) -> int ---;
	@(link_name="write")   _unix_write   :: proc(fd: Handle, buf: rawptr, size: int) -> int ---;
	//@(link_name="lseek64") _unix_seek    :: proc(fd: Handle, offset: i64, whence: i32) -> i64 ---;
	@(link_name="gettid")  _unix_gettid  :: proc() -> u64 ---;
	// @(link_name="stat")    _unix_stat    :: proc(path: cstring, stat: ^Stat) -> i32 ---;
	@(link_name="access")  _unix_access  :: proc(path: cstring, mask: int) -> int ---;

	@(link_name="malloc")  _unix_malloc  :: proc(size: int) -> rawptr ---;
	@(link_name="calloc")  _unix_calloc  :: proc(num, size: int) -> rawptr ---;
	@(link_name="free")    _unix_free    :: proc(ptr: rawptr) ---;
	@(link_name="realloc") _unix_realloc :: proc(ptr: rawptr, size: int) -> rawptr ---;
	@(link_name="getenv")  _unix_getenv  :: proc(cstring) -> cstring ---;

	@(link_name="exit")    _unix_exit    :: proc(status: int) ---;
}
foreign dl {
	@(link_name="dlopen")  _unix_dlopen  :: proc(filename: cstring, flags: int) -> rawptr ---;
	@(link_name="dlsym")   _unix_dlsym   :: proc(handle: rawptr, symbol: cstring) -> rawptr ---;
	@(link_name="dlclose") _unix_dlclose :: proc(handle: rawptr) -> int ---;
	@(link_name="dlerror") _unix_dlerror :: proc() -> cstring ---;
}

// NOTE(zangent): This is here for compatability reasons. Should this be here?
open_str :: proc(path: string, access_mode: i32 = O_RDONLY, perms: mode = 0666) -> Handle {
	cstr := str.new_cstring(path);
	handle := open(cstr, access_mode, perms);
	free(cstr);
	return handle;
}

open :: proc[open_str, open_cstr];

// close is defined in sys/posix/posix

read :: proc(fd: Handle, data: []byte) -> (int, Errno) {
	sz := _unix_read(fd, &data[0], len(data));
	return sz, 0;
}

write :: proc(fd: Handle, data: []byte) -> (int, Errno) {
	sz := _unix_write(fd, &data[0], len(data));
	return sz, 0;
}

seek :: proc(fd: Handle, offset: i64, whence: int) -> (i64, Errno) {
	res := _unix_seek(fd, offset, i32(whence));
	return res, 0;
}

file_size :: proc(fd: Handle) -> (i64, Errno) {
	prev, _   := seek(fd, 0, SEEK_CUR);
	size, err := seek(fd, 0, SEEK_END);
	seek(fd, prev, SEEK_SET);
	return size, err;
}


// NOTE(bill): Uses startup to initialize it

stdin:  Handle = 0;
stdout: Handle = 1;
stderr: Handle = 2;

/* TODO(zangent): Implement these!
last_write_time :: proc(fd: Handle) -> File_Time {}
last_write_time_by_name :: proc(name: string) -> File_Time {}
*/

access :: inline proc(path: string, mask: int) -> bool {
	cstr := str.new_cstring(path);
	defer free(cstr);
	return _unix_access(cstr, mask) == 0;
}

heap_alloc :: proc(size: int) -> rawptr {
	assert(size > 0);
	return _unix_calloc(1, size);
}

heap_resize :: proc(ptr: rawptr, new_size: int) -> rawptr {
	return _unix_realloc(ptr, new_size);
}

heap_free :: proc(ptr: rawptr) {
	_unix_free(ptr);
}

getenv :: proc(name: string) -> (string, bool) {
	path_str := str.new_cstring(name);
	defer free(path_str);
	cstr := _unix_getenv(path_str);
	if cstr == nil {
		return "", false;
	}
	return string(cstr), true;
}

exit :: proc(code: int) {
	_unix_exit(code);
}

current_thread_id :: proc() -> int {
	// return int(_unix_gettid());
	return 0;
}

dlopen :: inline proc(filename: string, flags: int) -> rawptr {
	cstr := str.new_cstring(filename);
	defer free(cstr);
	handle := _unix_dlopen(cstr, flags);
	return handle;
}
dlsym :: inline proc(handle: rawptr, symbol: string) -> rawptr {
	assert(handle != nil);
	cstr := str.new_cstring(symbol);
	defer free(cstr);
	proc_handle := _unix_dlsym(handle, cstr);
	return proc_handle;
}
dlclose :: inline proc(handle: rawptr) -> bool {
	assert(handle != nil);
	return _unix_dlclose(handle) == 0;
}
dlerror :: proc() -> string {
	return string(_unix_dlerror());
}


_alloc_command_line_arguments :: proc() -> []string {
	args := make([]string, len(__args__));
	for arg, i in __args__ {
		args[i] = string(arg);
	}
	return args;
}

// Activate stdio to the console that ran this program for Win32 graphical applications.
// If `create_console`, then create a console if one cannot be found.
// These are inline stubs on posix, so they'll be ignored.
// Returns a "failure" value.
activate_console :: inline (create_console: bool) -> bool do return false;
create_console :: inline () -> bool do return false;
