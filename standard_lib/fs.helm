import "os";
import "str";
using import "feature_test";

when OS_WINDOWS {
	import win32 "std:sys/microsoft/os";
	foreign import "system:kernel32.lib";
	@(default_calling_convention = "std")
	foreign kernel32 {
		@(link_name = "GetCurrentDirectoryA") _get_current_directory :: proc(buf_len: u32, buf: ^u8) ---;
		@(link_name = "CreateDirectoryA")     _create_directory      :: proc(^u8, rawptr) -> i32     ---;

		// What on earth was I trying to do here?
		// get_module_filename :: proc() -> i32           #cc_std #link_name "GetLastError"  ---;

	}
	_DEFAULT_PERMS :: 0;
} else {
	import "sys/posix/posix";
	_DEFAULT_PERMS :: posix.S_IRUSR | posix.S_IWUSR | posix.S_IRGRP | posix.S_IWGRP | posix.S_IROTH | posix.S_IWOTH;
}

// TODO: Choose one consistent file for this procedure to reside in.
read_entire_file :: os.read_entire_file;

// Get a handle to the file pointed to by the path.
open :: inline (path: string, flags := os.O_WRONLY | os.O_TRUNC, perms: posix.mode = _DEFAULT_PERMS) -> (os.Handle, bool) {
	when ODIN_OS == "windows" {
		h, ok := os.open(path, flags, perms);
		return h, (ok == os.ERROR_NONE);
	} else {
		cstr := str.new_cstring(path);
		defer free(cstr);
		handle := posix.open_cstr(cstr, flags, perms);
		return handle, (handle >= 0);
	}
}

// A wrapper around os.close so that they can be called from fs
close :: inline (fd: os.Handle) {
	os.close(fd);
}

// A wrapper around os.read so that they can be called from fs
read :: inline (fd: os.Handle, data: []u8) -> (int, bool) {
	rv, err := os.read(fd, data);
	return rv, err == 0;
}

// A wrapper around os.write so that they can be called from fs
write_str :: inline (fd: os.Handle, data: string) -> (int, bool) {
	return write_ptr(fd, cast([]u8)data);
}

// A wrapper around os.write so that they can be called from fs
write_ptr :: inline (fd: os.Handle, data: []u8) -> (int, bool) {
	rv, err := os.write(fd, data);
	return rv, err == 0;
}

write :: proc[write_str, write_ptr];

// A wrapper around os.seek so that they can be called from fs
seek :: inline (fd: os.Handle, offset: i64, whence: int) -> (i64, bool) {
	rv, err := os.seek(fd, offset, whence);
	return rv, err == 0;
}

// A wrapper around os.file_size so that they can be called from fs
file_size :: inline (fd: os.Handle) -> (i64, bool) {
	rv, err := os.file_size(fd);
	return rv, err == 0;
}

// Allocates memory.
// TODO: Does it really?
read_file_to_string :: inline (path: string) -> (data: string, success: bool) {
	buffer: []byte = ---;
	buffer, success = os.read_entire_file(path);
	if(!success) {
		return "", false;
	}
	return string(buffer), true;
}


mkdir :: (path: string, perms: posix.mode = _DEFAULT_PERMS) {
	parent := parent_name(path);
	if !exists(parent) do mkdir(parent, perms);
	when ODIN_OS == "windows" {
		_create_directory(c_path, nil);
	} else {
		c_path := str.new_cstring(path);
		defer free(c_path);
		posix.mkdir(c_path, perms);
	}
}

chdir :: (path: string) -> bool {

	c_path := str.new_cstring(path);
	defer free(c_path);

	when ODIN_OS == "windows" {

		_ := compile_assert(false);
		return false;

	} else {

		return posix.chdir(c_path) == 0;
	}
}

// Allocates memory...?
// At least, the array is allocated. Not sure about the contents.
list_dir :: (path: string) -> ([]string, bool) {

	c_path := str.new_cstring(path);
	defer free(c_path);

	when ODIN_OS == "windows" {

		_ := compile_assert(false);
		return nil, false;
		
	} else {

		dp := posix.opendir(c_path);

		if dp == nil do return nil, false;

		defer((cast(proc(^posix.DIR))posix.closedir)(dp));

		paths : [dynamic]string;

		ep := posix.readdir(dp);

		for ;ep != nil; ep = posix.readdir(dp) {
			child := cast(string)cstring(&ep.name[0]);
			if child != "." && child != ".." do	append(&paths, child);
		}

		return paths[..], true;
	}
}

// Returns whether or not a file exists.
// NOTE: Avoid patters similar to `if exists(path) do open(file)` because this is prone to race conditions.
exists :: inline (path: string) -> bool {

	when ODIN_OS == "windows" {

		h, err := os.open(path);

		if err == os.ERROR_NONE {
			os.close(h);
			return true;
		}
		return false;
	} else {
		return os.access(path, os.R_OK);
	}
}

is_file :: inline (path: string) -> bool {

	when ODIN_OS == "windows" {

		return !is_directory(path);

	} else {
		info, err := posix.stat(path);
		if err != 0 do return false;
		return posix.S_ISREG(info.mode);
	}
}

is_directory :: inline (path: string) -> bool {

	when ODIN_OS == "windows" {

		info := win32.get_file_attributes_a(path);
		return (info != win32.INVALID_FILE_ATTRIBUTES && 
		       (info &  win32.FILE_ATTRIBUTE_DIRECTORY));

	} else {

		info, err := posix.stat(path);
		if err != 0 do return false;
		return posix.S_ISDIR(info.mode);
	}
}

is_dir :: inline (path: string) -> bool do return is_directory(path);

// Not a directory, file, or s-link.
// Always false on win32.
is_special :: inline (path: string) -> bool {

	when ODIN_OS == "windows" {
		return false;
	} else {
		info, err := posix.stat(path);
		if err != 0 do return false;
		return !(posix.S_ISREG(info.mode) || posix.S_ISDIR(info.mode));
	}
}

// Allocates memory.
read_link :: (path: string) -> (string, bool) {

	path_cstr := str.new_cstring(path);
	defer free(path_cstr);

	when OS_WINDOWS {

		// Dupes the string so that you can free the return value safely.
		return str.dup(path);

	} else {

		if link_info, err := posix.lstat(path); err == 0 {

			buf := make([]u8, link_info.size);
			err = cast(type_of(err))posix.readlink(path_cstr, cast(cstring)&buf[0], cast(size_t)link_info.size);
			if err == 0 do return string(buf), true;
			free(buf);
		}

		return "", false;
	}
}

// Returns the directory the current program's binary file is in.
// Allocates memory.
get_binary_path :: inline () -> (string, bool) {

	when OS_APPLE {

		// We're going to take any strings we get and duplicate them.
		// That way their memory is managed by the current allocator instead of always being malloc/free
		// so that we can just free() them when we're done with them in user code
		
		size: u32;

		os.NSGetExecutablePath(nil, &size);

		if size == 0 do return "", false;

		buf := make([]u8, size);
		defer free(buf);

		os.NSGetExecutablePath(cast(cstring)&buf[0], &size);

		abs_path := posix.realpath(cast(cstring)&buf[0], nil);
		defer os.heap_free(cast(rawptr)cast(^u8)abs_path);

		return str.dup(cast(string)abs_path), true;

	} else when OS_LINUX {
		s := read_link("/proc/self/exe");
	} else when OS_WINDOWS {
		_ := compile_assert(false, "TODO");
	} else when OS_BSD {
		_ := compile_assert(false, "TODO");
	} else {
		_ := compile_assert(false, "Unsupported OS");
	}
	return "", false;
}

// Returns the current working directory.
// Allocates memory.
cwd :: proc() -> (string, bool) {

	when ODIN_OS == "windows" {

		/* GetCurrentDirectory's return value:
			1. function succeeds: the number of characters that are written to
				the buffer, not including the terminating null character.
			2. function fails: zero
			3. the buffer (lpBuffer) is not large enough: the required size of
				the buffer, in characters, including the null-terminating character.
		*/

		len := _get_current_directory(0, nil);

		if len != 0 {

			buf := make([]u8, len);
			written := _get_current_directory(len, &buf[0]);

			if written != 0 {
				return str.to_string(&buf[0]), true;
			}

		}

		return "", false;


	} else {

		// This is non-compliant to the POSIX spec, but both Linux and BSD/macOS implement this.
		// NOTE: Apparently Solaris does not, but I don't think that's really a target anyone uses anymore.
		heap_cwd := posix.getcwd(nil, 0);
		// We want to free this result instead of returning it so that all return values are allocated
		// with the proper allocator.
		defer os.heap_free(cast(rawptr)cast(^u8)heap_cwd);
		// A temporary converted string that will be duplicated with data from the context's allocator.
		_str := cast(string) heap_cwd;

		return str.dup(_str), true;
	}
}

when ODIN_OS == "windows" {
	SEPERATOR :: '\\';
} else {
	SEPERATOR :: '/';
}
is_path_separator :: inline (c: u8) -> bool {
	when ODIN_OS == "windows" {
		return c == '\\' || c == '/';
	} else {
		return c == '/';
	}
}

// Return the filename of a path. E.g. /tmp/my/file -> file
// Allocates memory.
base_name :: (path: string) -> string {
	first_non_sep := -1;
	for i := len(path)-1; i>0; i-=1 {
		if is_path_separator(path[i]) {
			if first_non_sep != -1 do return str.dup(path[i+1..first_non_sep+1]);
		} else if first_non_sep == -1 do first_non_sep = i;
	}
	return str.dup(path);
}
// Return the parent of a path. E.g. /tmp/my/file -> /tmp/my, /tmp/my -> /tmp, /tmp/my///// -> /tmp
// Allocates memory.
parent_name :: (path: string) -> string {
	hit_non_sep := false;
	for i := len(path)-1; i>0; i-=1 {
		if is_path_separator(path[i]) {
			if hit_non_sep do return str.dup(path[0..i]);
		} else do hit_non_sep = true;
	}
	return str.dup(path);
}

// Maps file's path relative to root's.
// E.g. to_relative('res/a/file.txt', 'org/b/x.xyz')
//      gives '../../b/x.xyz', assuming that both files exist.
//
// NOTE: This assumes that all files mentioned EXIST.
//       This is because we verify that `root` is a directory,
//       and we obtain the absolute version of both paths before operating.
//       If you want to skip this step, and you want root to always
//       be treated as a directory, use `to_relative_raw`
//
// Allocates memory.
to_relative_two :: (root, file: string) -> (string, bool) {

	assert(len(root) != 0);

	success: bool = ---;
	root, success = to_absolute(root);
	if !success do return "", false;
	defer free(root);
	return _to_relative_shared(root, file);
}

// Maps file's path relative to the current working directory.
//
// NOTE: This assumes that all files mentioned EXIST.
//       If you want to skip this verification, use to_relative_raw.
//
// Allocates memory.
to_relative_cwd :: (file: string) -> (string, bool) {

	root, success := get_binary_path();
	if !success do return "", false;
	defer free(root);
	return _to_relative_shared(root, file);
}

to_relative :: proc[to_relative_two, to_relative_cwd];

// A helper for the public APIs to_relative_two and to_relative_cwd, which are exposed as to_relative
// Allocates memory.
_to_relative_shared :: (root, file: string) -> (string, bool) {

	free_real_root := false;
	real_root := root;
	defer if free_real_root do free(real_root);
	if !is_dir(root) {
		free_real_root = true;
		real_root = parent_name(root);
	}

	new_file, free_new_file	:= to_absolute(file);
	if free_new_file do file = new_file;
	defer if free_new_file do free(new_file);

	return to_relative_raw(file, real_root);
}

import "std:fmt"
import "std:raw"
import "std:mem"

// Maps file's path relative to root's.
// E.g. to_relative('res/a/', 'res/b/x.xyz')
//      gives '../b/x.xyz'
// Allocates memory.
to_relative_raw :: (root, file: string) -> (string, bool) {

	// TODO: This function **really** needs a test.
	//       I don't have very much faith that it will hold up to testing.

	if common_path, success := common_path(file, root); success {
		defer free(common_path);
		file = file[len(common_path)..];
		root = root[len(common_path)..];
		if len(common_path) != 0 && is_path_separator(file[0]) do file = file[1..];
	} else do return "", false; // If we can't get a common path, we have to give up.

	root_dir_counter := len(root) == 0 ? 0 : 1;
	for i in 0..len(root) do if is_path_separator(root[i]) do root_dir_counter += 1;

	new_path := make([]byte, len(file) + 3 * root_dir_counter);
	for i in 0..root_dir_counter {
		new_path[i * 3 + 0] = '.';
		new_path[i * 3 + 1] = '.';
		new_path[i * 3 + 2] = SEPERATOR;
	}
	
	mem.copy(raw.data(new_path) + 3 * root_dir_counter, raw.data(file), len(file));

	return cast(string)new_path, true;
}

is_abs :: (path: string) -> bool {
	when OS_WINDOWS {
		if len(path) <= 2 do return false;
		drive := path[0];
		return ((drive >= 'A' && drive <= 'Z') || (drive >= 'a' && drive <= 'z')) && path[1] == ':';
	} else {
		return len(path) != 0 && path[0] == '/';
	}
}

// Returns the longest common sub-path of the paths
// Does not perform any normalization or convert to absolute paths.
// An error value is returned if absolute and relative paths are mixed,
//   or if less than two paths are passed.
// A blank string is returned if the paths have nothing in common.
// Inspired by python's commonpath
// Allocates memory.
common_path :: (paths: ...string) -> (string, bool) {

	{ // Input validation.
		if len(paths) < 2 do return "", false;

		// We can't mix abs and rel paths.
		mode := 0; // Abs: 1, Rel: 2
		for path in paths {
			if is_abs(path) {
				if mode == 0 do mode = 1;
				else if mode == 2 do return "", false;
			} else {
				if mode == 0 do mode = 2;
				else if mode == 1 do return "", false;
			}
		}
	}

	shared := paths[0];
	complete_path := true;


	for i in 1..len(paths) {
		p := paths[i];
		if len(shared) > len(p) do shared = shared[0 .. len(p)];
		for j in 0..len(shared) {
			if p[j] != shared[j] {
				if (j == len(p) - 1 && j == len(shared) - 1) || is_path_separator(p[j]) do complete_path = true;
				else do complete_path = false;
				shared = shared[0 .. j];
				break;
			}
		}
	}

	if complete_path == false {
		for i := len(shared); i > 0; i-=1 {
			if is_path_separator(shared[i-1]) {
				shared = shared[0 .. i];
				break;
			}
		}
	}

	return str.dup(shared), true;
}

// Convert a relative path to an absolute path using the cwd.
// Allocates memory.
to_absolute :: (paths: ...string) -> (string, bool) {
	assert(len(paths) != 0);

	cwd_str, ok := cwd();
	if !ok do return "", false;
	defer free(cwd_str);
	spread := make([]string, len(paths)+1);
	spread[0] = cwd_str;
	for _, i in paths do spread[i+1] = paths[i];
	return build_path(...spread), true;
}

// Allocates memory.
build_path :: (paths: ...string) -> string {
	assert(len(paths) > 0);
	if len(paths) > 1 {
		// TODO: Make this configurable some way so that people can work with Windows paths on *nix?
		second := paths[1];
		when ODIN_OS == "windows" {
			if len(second) > 2 do
				if (second[0] >= 'a' && second[0] <= 'z') || (second[0] >= 'A' && second[0] <= 'Z') {
					if second[1] == ':' do return build_path(...paths[1..]);
				}
		} else {
			if len(paths[0]) > 1 do
				if(second[0] == '/') do return build_path(...paths[1..]);
		}
	}
	path_ctor: [dynamic]string;
	defer free(path_ctor);
	last_entry: int = 0;
	str_len := 0;
	for path in paths {
		start_char := 0;
		for i in 0..len(path)+1 {
			c := (i == len(path)) ? 0 : path[i];
			if is_path_separator(c) || i == len(path) {
				str := path[start_char..i];
				if str == "." {}
				else if str == ".." {
					if last_entry != 0 {
						last_entry -= 1;
						str_len -= len(path_ctor[last_entry]);
					}
				} else if last_entry != 0 && str == "" {
				} else if last_entry == len(path_ctor) {
					last_entry = append(&path_ctor, str);
					str_len += len(str);
				} else {
					path_ctor[last_entry] = str;
					last_entry += 1;
					str_len += len(str);
				}
				start_char = i+1;
			}
		}
	}
	str_len += len(path_ctor) - 1;
	final_str := make([]u8, str_len>1?str_len:1);
	gi := 0;
	for p, i in path_ctor[..last_entry] {
		if i != 0 || last_entry == 1 {
			final_str[gi] = '/';
			gi += 1;
		}
		for j in 0..len(p) {
			final_str[gi+j] = p[j];
		}
		gi += len(p);
	}
	return string(final_str);
}