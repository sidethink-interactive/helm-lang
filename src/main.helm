import "std:os"
import "std:fmt"
import "std:str"
import "std:fs"

import "lexer"
import "parser"
using import "types"


Build_Kind :: enum {
	RELEASE,
	DEBUG,
	DEVELOPMENT
}

Compiler_State :: struct {
	build_kind: Build_Kind = Build_Kind.DEBUG,
	main_file_path: string,
}

VERSION :: "0.1";

// Allocates memory
version_str :: () -> string {
	return fmt.aprintp("Helm programming language compiler version {}\n", VERSION);
}

print_help :: () -> i32 {
	fmt.printp("{}
Usage: helm -b/--build BUILD_TYPE main_file_path

 \\_ where BUILD_TYPE is release, debug, or dev and
    main_file_path is the path to the file that implements main()
", version_str());
}

main :: () -> i32 {

	args := os.args[1..];
	arg: string = ---;

	got_main_file_path := false;

	state: Compiler_State;

	using state;

	for i := 0; i < len(args); i+=1 {

		arg = args[i];
		switch arg {
			case "-h", "--help": return print_help();
			case "-v": fmt.println(version_str()); return 0;
			case "-b": fallthrough;
			case "--build":
				i+=1;
				if i >= len(args) {
					fmt.printp("Didn't pass a build type to --build/-b; assuming {}\n\n", build_kind);
					break;
				}
				arg = args[i];

				if arg == "final" || arg == "r" || arg == "release" {

					build_kind = Build_Kind.RELEASE;

				} else if arg == "testing" || arg == "d" || arg == "debug" {

					build_kind = Build_Kind.DEBUG;

				} else if arg == "dev" || arg == "development" {

					build_kind = Build_Kind.DEVELOPMENT;

				} else {

					fmt.printp("Didn't pass a valid build type to --build/-b. ({})\nValid types are: \n\tr/release\n\td/debug\n\tdev/development\nassuming {}\n\n", args[i], build_kind);
				}
			case:
				if(fs.is_file(arg)) {
					if got_main_file_path {
						fmt.printp("Attempted to set another main file ({}) when there already is one ({}).\nIgnoring new file...\n", arg, main_file_path);
						break;
					}
					main_file_path = arg;
					got_main_file_path = true;
				} else {
					fmt.printp("Unknown argument or invalid file '{}'\n", arg);
				}
		}
	}

	if !got_main_file_path {
		fmt.println("No 'main' file was passed to Helm.\nBe sure to pass a file path to a .helm file to compile.");
		return 1;
	}


	if binary_path, succ := fs.get_binary_path(); succ {
		defer free(binary_path);

		fmt.printp("Starting {} build of \"{}\".\n", build_kind, main_file_path);
		process(main_file_path);

	} else {
		fmt.println("Failed to obtain binary directory.\nThe compiler can't really run without this.");
		return 1;
	}

	return 0;
}

process :: (main_file_path: string) {

	//files: [dynamic]File;

	//lexer.process(&files, main_file_path);

	file: File;
	file.path = main_file_path;
	lexer.process(&file);

	for t in file.tokens do fmt.printp("{{text: '{}', kind: '{}', line: {}}\n", t.text, t.kind, t.line);
}