using import "types"
import "std:fmt"
import "std:mem"

// TODO(zachary): Win32 console output coloring

ANSI_RED :: "\033[1;31m";
ANSI_ORN :: "\033[1;33m";
ANSI_RESET :: "\033[m";

_digits :: inline (n: u32, d: u32 = 1) -> u32 do if n >= 10 do return _digits(n / 10, d + 1); else do return d;
_digit_pad :: inline (n: u32) -> string do if n > 100 do return ""; else if n > 10 do return " "; else do return "  ";
_log_line :: inline (file: ^File, line: u32) do fmt.printp("\033[100m{}{} \033[m {}\n", _digit_pad(line), line, file.lines[line-1]);

error_flag := false;

show_context :: inline (file: ^File, line, col: u32) {

	if line > 1 do _log_line(file, line - 1);
	_log_line(file, line);
	space_ct := int(_digits(line)+3+col);
	spaces := cast(^byte)alloc(space_ct);
	defer free(spaces);
	mem.set(spaces, ' ', space_ct);
	spaces_str := string(mem.slice_ptr(spaces, space_ct));
	fmt.printp("{}{}^{}\n", ANSI_ORN, spaces_str, ANSI_RESET);
}

error_tok :: inline (tok: Token, err_string: string) {
	error_with_info(tok.file, tok.line, tok.col, err_string);
}

error_with_info :: (file: ^File, line, col: u32, err_string: string) {
	fmt.printp("\033[1m{}:{}:{}: {}error:{} {}\033[21m\n", file.path, line, col, ANSI_RED, ANSI_RESET, err_string);
	show_context(file, line, col);
	error_flag = true;
}
error :: proc[error_tok, error_with_info];

warn_tok :: inline (tok: Token, err_string: string) {
	warn_with_info(tok.file, tok.line, tok.col, err_string);
}

warn_with_info :: (file: ^File, line, col: u32, err_string: string) {
	fmt.printp("\033[1m{}:{}:{}: {}warning:{} {}\033[21m\n", file.path, line, col, ANSI_ORN, ANSI_RESET, err_string);
	show_context(file, line, col);
}
warn :: proc[warn_tok, warn_with_info];